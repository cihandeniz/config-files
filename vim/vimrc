if !has('nvim')
    source $VIMRUNTIME/defaults.vim
endif

call plug#begin('~/.vim/plugged')

" theme
Plug 'morhetz/gruvbox'
Plug 'NLKNguyen/papercolor-theme'
" yanks to multiple registers and allows to paste from a list
Plug 'vim-scripts/YankRing.vim'
" buffers as tabs
Plug 'ap/vim-buftabline'
" close buffers in a smarter way
Plug 'Asheq/close-buffers.vim'
" folder tree on left
Plug 'preservim/nerdtree'
" shows symbols according to git status in the tree
Plug 'Xuyuanp/nerdtree-git-plugin'
" highlight files and folders according to their types
Plug 'tiagofumo/vim-nerdtree-syntax-highlight'
" status bar
Plug 'vim-airline/vim-airline'
" themes for status bar
Plug 'vim-airline/vim-airline-themes'
" wordmotion for camelCase jumps
Plug 'chaoren/vim-wordmotion'
" file search plugin
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
" highlights trailing whitespaces and trims them upon save
Plug 'ntpeters/vim-better-whitespace'
" surround plugin
Plug 'tpope/vim-surround'
" maps git commands to vim commandline such as :G status
Plug 'tpope/vim-fugitive'
" shows added and modified lines within a file according to git status
Plug 'airblade/vim-gitgutter'
" reloads files automatically when they are changed outside vim
Plug 'djoshea/vim-autoread'
" debugging
Plug 'puremourning/vimspector'
" markdown support
Plug 'godlygeek/tabular'
Plug 'preservim/vim-markdown'
" c# support
Plug 'OmniSharp/omnisharp-vim', { 'for': 'cs' }
Plug 'OrangeT/vim-csharp', { 'for': 'cs' }
" Mappings, code-actions available flag and statusline integration
Plug 'nickspoons/vim-sharpenup', { 'for': 'cs' }
" css support
Plug 'ap/vim-css-color'
" js support
Plug 'pangloss/vim-javascript', { 'for': 'javascript' }
" ts support
Plug 'leafgarland/typescript-vim', { 'for': 'typescript' }
" Linting/error highlighting
Plug 'dense-analysis/ale'
" Autocompletion
Plug 'neoclide/coc.nvim', { 'branch': 'release', 'for': ['javascript', 'vue', 'json', 'cs'] }
" code snippet
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'
" closes all types of quotes and brackets automatically
Plug 'gosukiwi/vim-smartpairs'
" enables beautiful file icons in nerd tree
Plug 'ryanoasis/vim-devicons'
" ai in vim
Plug 'madox2/vim-ai'
" test runner
Plug 'roxma/nvim-yarp'
" Plug 'roxma/vim-hug-neovim-rpc'
Plug 'vim-test/vim-test'
" Plug 'rcarriga/vim-ultest', { 'do': ':UpdateRemotePlugins', 'for': ['javascript'] }

call plug#end()

set incsearch
set ignorecase smartcase
set ruler
set showcmd
set tabstop=4
set shiftwidth=4
set smartindent
set autoindent
set expandtab
set history=1000
set wildmenu
set splitright
set splitbelow
set number
set mouse=a
set updatetime=750
set fileformat=unix
set wildignore+=**/obj/**/*,**/node_modules/**/*,**/bin/**/*

" Folding
set foldmethod=syntax
set foldlevelstart=10
set foldcolumn=2

" commands
" --------

" deletes current buffer and moves to previous
" and respects terminal buffers while doing that
command DeleteCurrentBuffer
  \ if &filetype == 'nerdtree' |
    \ wincmd l |
  \ endif |
  \ if expand('%') != '' |
    \ let curbuf=bufnr() |
    \ let b_num = len(filter(range(1, bufnr('$')), 'buflisted(v:val)')) |
    \ if b_num == t:terminalcount + 1 |
      \ enew |
    \ else |
      \ bp |
      \ if &buftype == 'terminal' |
        \ bp |
      \ endif |
    \ endif |
    \ execute 'bd '.curbuf |
  \ endif
" git checkout this file to HEAD
command Gundo
  \ let currentfile=expand('%') |
  \ if confirm('Are you sure to undo local changes to "'.currentfile.'"?', "&Yes\n&No", 0) == 1 |
    \ echo system('git checkout HEAD -- '.currentfile) |
  \ endif
" git add and commit
command Gcommit
  \ G status |
  \ let message=input('Commit message: ') |
  \ if len(message) > 0 |
    \ echo system('git add -A') |
    \ echo system('git commit -m '''.message.''' ') |
  \ endif
" run if Makefile or run.sh exists
command RunThis
  \ if &filetype == 'nerdtree' | execute "normal! \<C-W>l" | endif |
  \ if len(expand('%')) > 0 | write | endif |
  \ if filereadable('Makefile') |
    \ echo 'Makefile found, running' |
    \ execute 'terminal make run' |
  \ elseif filereadable('run.sh') |
    \ echo 'run.sh found, running!' |
    \ execute 'terminal sh run.sh' |
  \ else | echo 'no run.sh!' | endif
" push if Makefile or push.sh exists
command PushThis
  \ if &filetype == 'nerdtree' | execute "normal! \<C-W>l" | endif |
  \ if len(expand('%')) > 0 | write | endif |
  \ if filereadable('Makefile') |
    \ echo 'Makefile found, pushing' |
    \ execute '!make push' |
  \ elseif filereadable('push.sh') |
    \ echo 'push.sh found, pushing!' |
    \ execute '!sh push.sh' |
  \ else | echo 'no push.sh!' | endif
" build if Makefile or build.sh exists
command BuildThisSilent
  \ if &filetype == 'nerdtree' | execute "normal! \<C-W>l" | endif |
  \ if len(expand('%')) > 0 | write | endif |
  \ if filereadable('build.sh') |
    \ silent echo system('sh build.sh') |
  \ elseif filereadable('Makefile') |
    \ silent echo system('make build') |
  \ endif
command BuildThis
  \ if &filetype == 'nerdtree' | execute "normal! \<C-W>l" | endif |
  \ if len(expand('%')) > 0 | write | endif |
  \ if filereadable('build.sh') |
    \ echo 'build.sh found, building!' |
    \ execute '!sh build.sh' |
  \ elseif filereadable('Makefile') |
    \ echo 'Makefile found, building' |
    \ execute '!make build' |
  \ else |
    \ echo 'no Makefile or build.sh!' |
  \ endif
" build if Makefile or test.sh exists
command TestThis
  \ if &filetype == 'nerdtree' | execute "normal! \<C-W>l" | endif |
  \ if len(expand('%')) > 0 | write | endif |
  \ if filereadable('test.sh') |
    \ echo 'test.sh found, testing!' |
    \ execute '!sh test.sh' |
  \ elseif filereadable('Makefile') |
    \ echo 'Makefile found, testing' |
    \ execute '!make test' |
  \ else |
    \ echo 'no Makefile or test.sh!' |
  \ endif

" auto commands
" -------------
augroup numbertoggle
  autocmd!
  autocmd BufEnter,FocusGained,InsertLeave,WinEnter * if &filetype != 'nerdtree' && &filetype != 'tagbar' && &filetype != 'UltestSummary' && mode() != "i" | set rnu | endif
  autocmd BufLeave,FocusLost,InsertEnter,WinLeave   * if &filetype != 'nerdtree' && &filetype != 'tagbar' && &filetype != 'UltestSummary' | set nornu | endif
augroup END

augroup vimrcEx
  au!
  autocmd FileType text,markdown setlocal textwidth=80
  autocmd FileType text,markdown set colorcolumn=+1
  autocmd FileType text,markdown hi ColorColumn ctermbg=233
augroup END

" count terminals
" ---------------
if !has('nvim')
    let t:terminalcount = 0
    autocmd TerminalWinOpen * let t:terminalcount += 1 |
    autocmd BufDelete * if &buftype == 'terminal' | if t:terminalcount > 0 | let t:terminalcount -= 1 | endif | endif
endif

" themes
" -------
" set background=dark
" colorscheme PaperColor
set bg=dark
let g:gruvbox_contrast_dark='hard'
let g:gruvbox_sign_column='bg0'
colorscheme gruvbox

hi NonText ctermfg=bg
hi CursorLine ctermbg=235
hi CursorColumn ctermbg=235
hi FoldColumn ctermbg=bg ctermfg=237
hi Folded ctermbg=235
set fillchars+=vert:\▏
hi VertSplit ctermfg=235

" cursors
" -------
let &t_SI = "\e[5 q" " blinking bar for insert mode
let &t_SR = "\e[1 q" " blinking block for replace mode
let &t_EI = "\e[4 q" " steady underline for normal mode

setlocal cursorline cursorcolumn
augroup CursorLine
  au!
  au WinEnter,BufWinEnter,InsertLeave * setlocal cursorline cursorcolumn
  au WinLeave,InsertEnter * setlocal nocursorline nocursorcolumn
augroup END

" wordmotion
" ----------
let g:wordmotion_uppercase_spaces = ['''', '"', '<', '>', '(', ')', '{', '}', '[', ']', '.', ',', ':', ';', '$']

" air-line
" --------
let g:airline_theme='deus'
let g:airline#extensions#tabline#enabled = 0
let g:airline_powerline_fonts = 1

" nerd tree
" ---------
let g:NERDTreeGitStatusUseNerdFonts = 2 " you should install nerdfonts by yourself. default: 0
let g:NERDTreeWinSize = 100
let g:NERDTreeMinimalUI = 1
let g:NERDTreeIgnore = ['.DS_Store', '^.git$', '^node_modules$', '^bin$', '^obj$', '^tags$', '^packages$', '^logs$', '^[.].*[.]swp$', '^dist$', '^.nuxt$', '^.public$', '^.temp$']

" webdevicons
" -----------
" loading the plugin
let g:webdevicons_enable = 1
" adding the flags to NERDTree
let g:webdevicons_enable_nerdtree = 1
" whether or not to show the nerdtree brackets around flags
let g:webdevicons_conceal_nerdtree_brackets = 1
" arrange padding before and after icons in nerd tree
let g:WebDevIconsNerdTreeAfterGlyphPadding = ' '
let g:WebDevIconsNerdTreeBeforeGlyphPadding = ' '
let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols = {}
let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['cs'] = '#'
let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['csproj'] = ''
let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['html'] = ''
let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['props'] = ''
let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['targets'] = ''
let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['vue'] = ''
let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['xml'] = ''

let g:NERDTreeExtensionHighlightColor = {}
let g:NERDTreeExtensionHighlightColor['csproj'] = '7d63bb'
let g:NERDTreeExtensionHighlightColor['sln'] = '7d63bb'
let g:NERDTreeExtensionHighlightColor['props'] = 'd96939'
let g:NERDTreeExtensionHighlightColor['targets'] = 'd96939'
let g:NERDTreeExtensionHighlightColor['xml'] = 'd96939'

set encoding=UTF-8
" after a re-source, fix syntax matching issues (concealing brackets):
if exists('g:loaded_webdevicons')
  call webdevicons#refresh()
endif

" better whitespace
" -----------------
let g:better_whitespace_enabled=1
let g:strip_whitespace_on_save=1
let g:strip_whitespace_confirm=0

" markdown
" --------
let g:vim_markdown_frontmatter = 1
let g:vim_markdown_new_list_item_indent = 2
let g:vim_markdown_strikethrough = 1
let g:vim_markdown_fenced_languages = ['csharp=cs', 'javascript=js']
let g:vim_markdown_toc_autofit = 1
let g:vim_markdown_folding_disabled = 1

" ulti snips
" ----------
" Tab to expand (like CMD-Down to enter)
let g:UltiSnipsExpandTrigger="<Tab>"
" Tab to jump forward
let g:UltiSnipsJumpForwardTrigger="<Tab>"
" Shift-Tab to jump backward
let g:UltiSnipsJumpBackwardTrigger="<S-Tab>"

" sharpenup
" ---------
let g:sharpenup_map_prefix='≥'
let g:sharpenup_codeactions_autocmd='CursorHold,CursorMoved'

" javascript
" ----------
let g:javascript_plugin_jsdoc = 1
let g:javascript_plugin_ngdoc = 1
" Install coc plugins using below line
" :CocInstall coc-css coc-eslint coc-highlight coc-html coc-json coc-tsserver coc-vetur

" ALE
" ---
let g:ale_sign_error = '•'
let g:ale_sign_warning = '•'
let g:ale_sign_info = '·'
let g:ale_sign_style_error = '·'
let g:ale_sign_style_warning = '·'
highlight ALEError ctermbg=DarkRed ctermfg=LightGray
let g:ale_linters = { 'cs': ['OmniSharp'] }
let g:ale_fixers = {
\  'javascript': ['eslint'],
\   '*': ['remove_trailing_lines', 'trim_whitespace'],
\}
let g:ale_linters_explicit = 1
let g:ale_sign_column_always = 1
let g:ale_fix_on_save = 1

" Autocompletion
" --------------
if !has('nvim')
    set completeopt=menuone,noinsert,noselect,popup
    set completepopup=highlight:Pmenu,border:off
endif

" vim-test
" --------
let g:test#csharp#dotnettest#options = '--no-build'

" Ultest
" ------
" let g:ultest_running_sign = '►'
" let g:ultest_summary_width = 125
" let g:ultest_max_threads = 20

" OmniSharp
" ---------
let g:OmniSharp_popup_position = 'peek'
let g:OmniSharp_popup_options = {
\ 'highlight': 'Normal',
\ 'padding': [0, 0, 0, 0],
\ 'border': [1]
\}
let g:OmniSharp_popup_mappings = {
\ 'sigNext': '<C-n>',
\ 'sigPrev': '<C-p>',
\ 'lineDown': ['<C-e>', 'j'],
\ 'lineUp': ['<C-y>', 'k'],
\ 'pageDown': ['<C-f>', '<PageDown>'],
\ 'pageUp': ['<C-b>', '<PageUp>'],
\ 'close': '<Esc>'
\}
let g:OmniSharp_want_snippet = 1
let g:OmniSharp_highlight_groups = {
\ 'ExcludedCode': 'NonText'
\}
let g:OmniSharp_selector_findusages = 'fzf'
let g:OmniSharp_selector_findmembers = 'fzf'
let g:OmniSharp_server_use_net6 = 1
let g:OmniSharp_highlighting = 3
let g:OmniSharp_diagnostic_exclude_paths = [
\ 'obj\\',
\ '[Tt]emp\\',
\ '\.nuget\\',
\ '\<AssemblyInfo\.cs\>'
\]

" vimspector
" ----------
let g:vimspector_enable_mappings = 'VISUAL_STUDIO'

" key mappings
" ------------

" F8 to open/close tagbar
nmap <F8> :TagbarToggle<CR>
" Shift-k to insert next line (opposite of Shift-j)
nnoremap K i<CR><Esc>l
" Alt-;
imap ; <End>;
nmap ; A;<Esc>
" ; to open Command without shift
noremap ; :
" Alt-, to open ~/.vimrc
nnoremap , :e ~/.vimrc<CR>
" Alt-w to delete current buffer
nnoremap w :DeleteCurrentBuffer<CR>
" Alt-Shift-w to delete all buffers except open
nnoremap W :Bdelete hidden<CR>
" Alt-q Alt-w to close window
nnoremap qw :close<CR>
" Alt-q Alt-q to quit
nnoremap qq :qa<CR>
" Alt-s to save (write)
nnoremap s :w<CR>
" Alt-l to move cursor to right window
nnoremap l <C-W>l
tnoremap l <C-W>l
" Alt-h to move cursor to left window
nnoremap h <C-W>h
tnoremap h <C-W>h
" Alt-j to move cursor to below window
nnoremap j <C-W>j
tnoremap j <C-W>j
" Alt-k to move cursor to above window
nnoremap k <C-W>k
tnoremap k <C-W>k
" Alt-Shift-l to move to next buffer
nnoremap L :bn<CR>
tnoremap L <C-w>:bn<CR>
" Alt-Shift-h to move to previous buffer
nnoremap H :bp<CR>
tnoremap H <C-w>:bp<CR>
" Alt-Shift-j to move line down
nnoremap J ddp
" Alt-Shift-k to move line up
nnoremap K ddkkp
" Alt-n to toggle nerdtree
nnoremap n <C-w>:NERDTreeToggle<CR>
tnoremap n <C-w>:NERDTreeToggle<CR>
" Alt-p to show yank-ring window
nnoremap p :YRShow<CR>
" Alt-c to paste from clipboard (linux)
noremap v  "+P
" Alt-v to yank to clipboard
noremap c  "+y
" Alt-a to select all text
nnoremap a ggVG
" Alt-Shift-. to increase window width
nnoremap > <C-w>>
" Alt-Shift-, to decrease window width
nnoremap < <C-w><
" Alt-r Alt-r to run
nnoremap rr :RunThis<CR>
" Alt-r Alt-p to push
nnoremap rp :PushThis<CR>
" Alt-b to build
nnoremap b :BuildThis<CR>
" Alt-r Alt-t to run current test
" nnoremap rt :BuildThisSilent<CR>:UltestNearest<CR>:UltestSummaryOpen<CR>
" Alt-r t to run current test
" nnoremap rt :BuildThisSilent<CR>:Ultest<CR>:UltestSummaryOpen<CR>
" Alt-r a to test
nnoremap ra :TestThis<CR>
" Alt-x to replace with x
nnoremap x rx
" ]l to move to next error
nnoremap ]l :lnext<CR>
" [l to move to previous error
nnoremap [l :lprevious<CR>

" Fugitive
" --------
" Alt-g Alt-g to open fugitive
nnoremap gg :G<CR>
" Alt-g Alt-s to git status
nnoremap gs :G status<CR>
" Alt-g Alt-c to git commit -m ''
nnoremap gc :Gcommit<CR>
" Alt-g Alt-p to git push
nnoremap gp :G push<CR>
" Alt-g Alt-P to git pull
nnoremap gP :G pull<CR>
" Alt-g Alt-d to git diff
nnoremap gd :Gdiff!<CR>
" Alt-g Alt-r to git checkout current file to head
nnoremap <silent> gr :Gundo<CR>

" NERDTree
" --------
" Alt-f to sync file in nerd tree
nnoremap f :NERDTreeFind<CR><C-W>l

" FZF
" ---
" Alt-t to open fuzzy search
nnoremap t :FZF<CR>
" Alt-t Alt-t to open fuzzy search through fugitive
nnoremap tt :GF<CR>

augroup markdown
    autocmd!

    " Tabstop
    autocmd FileType markdown set tabstop=2 shiftwidth=2 softtabstop=2 expandtab
augroup END

augroup csharp
    autocmd!

    au BufRead,BufNewFile *.props set filetype=xml
    au BufRead,BufNewFile *.targets set filetype=xml

    " Fold regions
    autocmd FileType cs set foldlevelstart=0

    " Show type information automatically when the cursor stops moving.
    " Note that the type is echoed to the Vim command line, and will overwrite
    " any other messages in this space including e.g. ALE linting messages.
    autocmd CursorHold *.cs OmniSharpTypeLookup

    " gd to go to definition
    autocmd FileType cs nmap <silent> <buffer> gd <Plug>(omnisharp_go_to_definition)
    " Alt-Shift-o to fix and sort usings and code format
    autocmd FileType cs silent nnoremap O :OmniSharpCodeFormat<CR>:OmniSharpFixUsings<CR>

    autocmd FileType cs nnoremap rt :OmniSharpRunTest<CR>
    autocmd FileType cs nnoremap rt :OmniSharpRunTestsInFile<CR>

    " Alt-. Alt-. to open code actions
    autocmd FileType cs nnoremap .. :OmniSharpGetCodeActions<CR>
    " Alt+. + fu to find usages
    autocmd FileType cs nmap .fu <Plug>(omnisharp_find_usages)
    " Alt+. + fi to find usages
    autocmd FileType cs nmap .fi <Plug>(omnisharp_find_implementations)
    " Alt+. + pd to preview definition
    autocmd FileType cs nmap .pd <Plug>(omnisharp_preview_definition)
    " Alt+. + pi to preview implementations
    autocmd FileType cs nmap .pi <Plug>(omnisharp_preview_implementations)
    " Alt+. + fs to find symbols
    autocmd FileType cs nmap .fs <Plug>(omnisharp_find_symbol)
    " Alt+. + gcc to global code check
    autocmd FileType cs nmap .gcc <Plug>(omnisharp_global_code_check)
    " Alt+. + nm to rename
    autocmd FileType cs nmap .nm <Plug>(omnisharp_rename)
    " Alt+. + re to restart os server
    autocmd FileType cs nmap .re <Plug>(omnisharp_restart_server)
augroup END

augroup html
    autocmd!

    " Tabstop
    autocmd FileType html,css set tabstop=2 shiftwidth=2 softtabstop=2 expandtab
augroup END

augroup javascript
    autocmd!

    " Fold regions
    autocmd FileType javascript,vue,json,typescript set foldlevelstart=30

    " Alt-. Alt-. to open code actions
    autocmd FileType javascript,vue,typescript nnoremap .. :CocAction<CR>
    " gd to go to definition
    autocmd FileType javascript,vue,typescript nnoremap gd :call CocActionAsync('jumpDefinition')<CR>
    " Alt-. fi to find implementations
    autocmd FileType javascript,vue,typescript nnoremap .fi :call CocActionAsync('jumpImplementation')<CR>
    " Alt-. fu to find usages
    autocmd FileType javascript,vue,typescript nnoremap .fu :call CocActionAsync('jumpReferences')<CR>
    " Alt-. nm to rename
    autocmd FileType javascript,vue,typescript nnoremap .nm :call CocActionAsync('rename')<CR>
    " Alt-Shift-o to format
    autocmd FileType javascript,vue,typescript nnoremap O :CocCommand eslint.executeAutofix<CR>
    autocmd FileType json nnoremap O :%!python -m json.tool<CR>
    " Alt-. cr to restart coc
    autocmd FileType javascript,vue,typescript nnoremap .cr :CocRestart<CR>
augroup END
