source $VIMRUNTIME/defaults.vim

call plug#begin('~/.vim/plugged')

" theme
Plug 'morhetz/gruvbox'
Plug 'danilo-augusto/vim-afterglow'
" yanks to multiple registers and allows to paste from a list
Plug 'vim-scripts/YankRing.vim'
" folder tree on left
Plug 'preservim/nerdtree'
" buffers as tabs
Plug 'ap/vim-buftabline'
" close buffers in a smarter way
Plug 'Asheq/close-buffers.vim'
" shows symbols according to git status in the tree
Plug 'Xuyuanp/nerdtree-git-plugin'
" highlight files and folders according to their types
Plug 'tiagofumo/vim-nerdtree-syntax-highlight'
" status bar
Plug 'vim-airline/vim-airline'
" themes for status bar
Plug 'vim-airline/vim-airline-themes'
" highlight other uses of current word
Plug 'RRethy/vim-illuminate'
" file search plugin
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
" highlights trailing whitespaces and trims them upon save
Plug 'ntpeters/vim-better-whitespace'
" maps git commands to vim commandline such as :G status
Plug 'tpope/vim-fugitive'
" shows added and modified lines within a file according to git status
Plug 'airblade/vim-gitgutter'
" shows tags on the right for quick jump
Plug 'preservim/tagbar'
" reloads files automatically when they are changed outside vim
Plug 'djoshea/vim-autoread'
" debugging
Plug 'puremourning/vimspector'
" go support
Plug 'fatih/vim-go', { 'tag': '*' }
" c# support
Plug 'OmniSharp/omnisharp-vim'
Plug 'OrangeT/vim-csharp'
" Mappings, code-actions available flag and statusline integration
Plug 'nickspoons/vim-sharpenup'
" js support
Plug 'pangloss/vim-javascript'
" ts support
Plug 'leafgarland/typescript-vim'
" react support
Plug 'MaxMEllon/vim-jsx-pretty'
Plug 'peitalin/vim-jsx-typescript'
" Linting/error highlighting
Plug 'dense-analysis/ale'
" Autocompletion
Plug 'prabirshrestha/asyncomplete.vim'
" Code completion
Plug 'neoclide/coc.nvim', {'branch': 'release'}
" code autocomplete
" Plug 'ycm-core/YouCompleteMe'
" code snippet too
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'
Plug 'prabirshrestha/asyncomplete-ultisnips.vim'
" closes all types of quotes and brackets automatically
Plug 'gosukiwi/vim-smartpairs'
" enables beautiful file icons in nerd tree
Plug 'ryanoasis/vim-devicons'

call plug#end()

set incsearch
set ignorecase smartcase
set ruler
set showcmd
set tabstop=4
set shiftwidth=4
set smartindent
set autoindent
set expandtab
set history=1000
set wildmenu
set splitright
set splitbelow
set foldcolumn=2
set number

" commands
" --------

" deletes current buffer and moves to previous
command CloseThis
  \ if winnr('$') > 2 |
    \ close |
  \ else |
    \ let curbuf=bufnr() |
    \ bp |
    \ execute 'bd '.curbuf |
  \ endif
" git checkout this file to HEAD
command Gundo
  \ let currentfile=expand('%') |
  \ if confirm('Are you sure to undo local changes to "'.currentfile.'"?', "&Yes\n&No", 0) == 1 |
    \ echo system('git checkout HEAD -- '.currentfile) |
  \ endif
" git add and commit
command Gcommit
  \ G status |
  \ let message=input('Commit message: ') |
  \ if len(message) > 0 |
    \ echo system('git add -A') |
    \ echo system('git commit -m '''.message.''' ') |
  \ endif
" run if run.sh exists
command RunThis
  \ if filereadable('run.sh') |
    \ echo 'run.sh found, running!' |
    \ execute 'terminal ./run.sh' |
  \ else |
  \ endif

" auto commands
" -------------
augroup numbertoggle
  autocmd!
  autocmd BufEnter,FocusGained,InsertLeave,WinEnter * if &filetype != 'nerdtree' && &filetype != 'tagbar' && mode() != "i" | set rnu | set nonu | endif
  autocmd BufLeave,FocusLost,InsertEnter,WinLeave   * if &filetype != 'nerdtree' && &filetype != 'tagbar' | set nornu | set nu | endif
augroup END

augroup vimrcEx
  au!
  autocmd FileType text setlocal textwidth=80
augroup END

" themes
" -------
colorscheme gruvbox
set bg=dark

" uncomment below to have different theme for different modes
" ---------
" autocmd InsertEnter * colorscheme afterglow | set bg=dark
" autocmd InsertLeave * colorscheme gruvbox | set bg=dark

" cursors
" -------
let &t_SI = "\e[5 q" " blinking bar for insert mode
let &t_EI = "\e[4 q" " steady underline for normal mode

" air-line
" --------
let g:airline_theme='distinguished'
let g:airline#extensions#tabline#enabled = 0
let g:airline_powerline_fonts = 1

" nerd tree
" ---------
" Start NERDTree. If a file is specified, move the cursor to its window.
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * NERDTree | if argc() > 0 || exists("s:std_in") | wincmd p | endif

" Exit Vim if NERDTree is the only window remaining in the only tab.
autocmd BufEnter * if tabpagenr('$') == 1 && winnr('$') == 1 && exists('b:NERDTree') && b:NERDTree.isTabTree() | quit | endif

" Close the tab if NERDTree is the only window remaining in it.
autocmd BufEnter * if winnr('$') == 1 && exists('b:NERDTree') && b:NERDTree.isTabTree() | quit | endif

" If another buffer tries to replace NERDTree, put it in the other window, and bring back NERDTree.
autocmd BufEnter * if bufname('#') =~ 'NERD_tree_\d\+' && bufname('%') !~ 'NERD_tree_\d\+' && winnr('$') > 1 |
    \ let buf=bufnr() | buffer# | execute "normal! \<C-W>w" | execute 'buffer'.buf | endif

" Open the existing NERDTree on each new tab.
autocmd BufWinEnter * if getcmdwintype() == '' && getbufvar('%', '&buftype', 'ERROR') != 'quickfix' | silent NERDTreeMirror | endif

let g:NERDTreeGitStatusUseNerdFonts = 2 " you should install nerdfonts by yourself. default: 0
let g:NERDTreeWinSize = 40
let g:NERDTreeMinimalUI = 1
let g:NERDTreeIgnore = ['.DS_Store', '^.git$', '^node_modules$', '^bin$', '^obj$', '^tags$']

" webdevicons
" -----------
" loading the plugin
let g:webdevicons_enable = 1
" adding the flags to NERDTree
let g:webdevicons_enable_nerdtree = 1
" whether or not to show the nerdtree brackets around flags
let g:webdevicons_conceal_nerdtree_brackets = 1
" arrange padding before and after icons in nerd tree
let g:WebDevIconsNerdTreeAfterGlyphPadding = ' '
let g:WebDevIconsNerdTreeBeforeGlyphPadding = ' '
set encoding=UTF-8
" after a re-source, fix syntax matching issues (concealing brackets):
if exists('g:loaded_webdevicons')
  call webdevicons#refresh()
endif

" better whitespace
" -----------------
let g:better_whitespace_enabled=1
let g:strip_whitespace_on_save=1
let g:strip_whitespace_confirm=0

" vim go
" ------
let g:go_highlight_function_calls = 1
let g:go_fmt_autosave = 1
syntax on

" ulti snips
" ----------
" Tab to expand (like CMD-Down to enter)
let g:UltiSnipsExpandTrigger="<Tab>"
" Tab to jump forward
let g:UltiSnipsJumpForwardTrigger="<Tab>"
" Shift-Tab to jump backward
let g:UltiSnipsJumpBackwardTrigger="<S-Tab>"

" sharpenup
" ---------
let g:sharpenup_map_prefix='‚â•'
let g:sharpenup_codeactions_autocmd='CursorHold,CursorMoved'

" javascript
" ----------
let g:javascript_plugin_jsdoc = 1
let g:javascript_plugin_ngdoc = 1

" ALE
" ---
let g:ale_sign_error = '‚Ä¢'
let g:ale_sign_warning = '‚Ä¢'
let g:ale_sign_info = '¬∑'
let g:ale_sign_style_error = '¬∑'
let g:ale_sign_style_warning = '¬∑'
let g:ale_linters = { 'cs': ['OmniSharp'] }
let g:ale_fixers = {
\   '*': ['remove_trailing_lines', 'trim_whitespace'],
\}
let g:ale_linters_explicit = 1
let g:ale_sign_column_always = 1
let g:ale_fix_on_save = 1

" Asyncomplete
" ------------
let g:asyncomplete_auto_popup = 0
let g:asyncomplete_auto_completeopt = 0
set completeopt=menuone,noinsert,noselect,preview
set completepopup=highlight:Pmenu,border:off
autocmd! CompleteDone * if pumvisible() == 0 | pclose | endif
call asyncomplete#register_source(asyncomplete#sources#ultisnips#get_source_options({
\ 'name': 'ultisnips',
\ 'allowlist': ['*'],
\ 'completor': function('asyncomplete#sources#ultisnips#completor'),
\ }))

" OmniSharp
" ---------
let g:OmniSharp_popup_position = 'peek'
let g:OmniSharp_popup_options = {
\ 'highlight': 'Normal',
\ 'padding': [0, 0, 0, 0],
\ 'border': [1]
\}
let g:OmniSharp_popup_mappings = {
\ 'sigNext': '<C-n>',
\ 'sigPrev': '<C-p>',
\ 'pageDown': ['<C-f>', '<PageDown>'],
\ 'pageUp': ['<C-b>', '<PageUp>']
\}
let g:OmniSharp_want_snippet = 1
let g:OmniSharp_highlight_groups = {
\ 'ExcludedCode': 'NonText'
\}

" vimspector
" ----------
let g:vimspector_enable_mappings = 'VISUAL_STUDIO'

" key mappings
" ------------

" Alt-t to open fuzzy search
nnoremap ‚Ä† :FZF<CR>
nnoremap t :FZF<CR>
" Alt-o to open find symbol in workspace
nmap √∏ <Plug>(YCMFindSymbolInWorkspace)
" TODO nmap o <Plug>(YCMFindSymbolInWorkspace)
" F8 to open/close tagbar
nmap <F8> :TagbarToggle<CR>
" Shift-k to insert next line (opposite of Shift-j)
nnoremap K i<CR><Esc>l
" Alt-;
imap ‚Ä¶ <End>;
imap ; <End>;
" Alt-, to open ~/.vimrc
nnoremap ‚â§ :e ~/.vimrc<CR>
nnoremap , :e ~/.vimrc<CR>
" Alt-w to close
nnoremap ‚àë :CloseThis<CR>
nnoremap w :CloseThis<CR>
" Alt-Shift-w to close
nnoremap ‚Äû :Bdelete hidden<CR>
nnoremap W :Bdelete hidden<CR>
" Alt-q to quit
nnoremap ≈ì :qa<CR>
nnoremap q :qa<CR>
" Alt-s to save (write)
nnoremap √ü :w<CR>
nnoremap s :w<CR>
" Alt-l to move cursor to right window
nnoremap ¬¨ <C-W>l
nnoremap l <C-W>l
" Alt-h to move cursor to left window
nnoremap Àô <C-W>h
nnoremap h <C-W>h
" Alt-j to move cursor to below window
nnoremap ‚àÜ <C-W>j
nnoremap j <C-W>j
" Alt-k to move cursor to above window
nnoremap Àö <C-W>k
nnoremap k <C-W>k
" Alt-Shift-l to move to next buffer
nnoremap √í :bn<CR>
nnoremap L :bn<CR>
" Alt-Shift-h to move to previous buffer
nnoremap √ì :bp<CR>
nnoremap H :bp<CR>
" Alt-p to show yank-ring window
nnoremap œÄ :YRShow<CR>
nnoremap p :YRShow<CR>
" Alt-Shift-p to paste from clipboard
noremap ‚àè "+P
" TODO noremap P "+P
" Alt-Shift-y to yank to clipboard
noremap √Å "+y
" TODO noremap Y "+y
" Alt-a to select all text
nnoremap √• ggVG
nnoremap a ggVG
" Alt-Shift-. to increase window width
nnoremap Àò <C-w>>
" TODO nnoremap > <C-w>>
" Alt-Shift-, to decrease window width
nnoremap ¬Ø <C-w><
nnoremap < <C-w><
" Alt-r to run
nnoremap ¬Æ :w<CR>:RunThis<CR>
nnoremap r :w<CR>:RunThis<CR>

" Fugitive
" --------
" Alt-g Alt-s to git status
nnoremap ¬©√ü :G status<CR>
nnoremap gs :G status<CR>
" Alt-g Alt-c to git commit -m ''
nnoremap ¬©√ß :Gcommit<CR>
nnoremap gc :Gcommit<CR>
" Alt-g Alt-p to git push
nnoremap ¬©œÄ :G push<CR>
nnoremap gp :G push<CR>
" Alt-g Alt-d to git diff
nnoremap ¬©‚àÇ :Gdiff!<CR>
nnoremap gd :Gdiff!<CR>
" Alt-g Alt-r to git checkout current file to head
nnoremap <silent> ¬©¬Æ :Gundo<CR>
nnoremap <silent> gr :Gundo<CR>

" NERDTree
" --------
" Alt-f to sync file in nerd tree
nnoremap ∆í :NERDTreeFind<CR><C-W>l
nnoremap f :NERDTreeFind<CR><C-W>l

" Go
" --
" Alt-r to run
autocmd FileType go nnoremap ¬Æ :w<CR>:GoBuild<CR>:GoRun<CR>
" Alt-b to build
autocmd FileType go nnoremap ‚à´ :w<CR>:GoBuild<CR>
" Alt-c to comment
autocmd FileType go nnoremap √ß mc^i// <Esc>`clll
" Alt-Shift-c to uncomment
autocmd FileType go nnoremap √á mc^xxx`chhh

" C#
" --
" Alt-Shift-o to fix and sort usings and code format
autocmd FileType cs nnoremap √ò :OmniSharpCodeFormat<CR>mxggV}k:sort<CR>`xzz:OmniSharpFixUsings<CR>
" Alt-. Alt-. to open code actions
autocmd FileType cs nnoremap ‚â•‚â• :OmniSharpGetCodeActions<CR>
" Ctrl-Space to open autocomplete while typing
autocmd FileType cs imap <c-@> <Plug>(asyncomplete_force_refresh)
" . to open autocomplete while typing
autocmd FileType cs imap . .<Plug>(asyncomplete_force_refresh)
" Alt-b to build
autocmd FileType cs nnoremap ‚à´ :w<CR>:!dotnet build<CR>
" Alt-Shift-b to build
autocmd FileType cs nnoremap ƒ± :w<CR>:!dotnet build --no-incremental<CR>
" Alt-c to comment
autocmd FileType cs nnoremap √ß mc^i// <Esc>`clll
" Alt-Shift-c to uncomment
autocmd FileType cs nnoremap √á mc^xxx`chhh

" JS
" --
" Alt-. for leader except go to definition
autocmd FileType javascript,vue nnoremap ‚â•‚â• :CocAction<CR>
" gd to go to definition
autocmd FileType javascript,vue nnoremap gd :call CocActionAsync('jumpDefinition')<CR>
" Alt-. fi to find implementations
autocmd FileType javascript,vue nnoremap ‚â•fi :call CocActionAsync('jumpImplementation')<CR>
" Alt-. fu to find usages
autocmd FileType javascript,vue nnoremap ‚â•fu :call CocActionAsync('jumpReferences')<CR>
" Alt-. nm to rename
autocmd FileType javascript,vue nnoremap ‚â•nm :call CocActionAsync('rename')<CR>
" Alt-Shift-p to format
autocmd FileType javascript,vue nnoremap √ò :CocCommand eslint.executeAutofix<CR>
" Alt-. cr to restart coc
autocmd FileType javascript,vue nnoremap ‚â•cr :CocRestart<CR>
" Alt-c to comment
autocmd FileType javascript,vue nnoremap √ß mc^i// <Esc>`clll
" Alt-Shift-c to uncomment
autocmd FileType javascript,vue nnoremap √á mc^xxx`chhh
